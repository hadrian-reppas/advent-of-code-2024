//
// Created by Hadrian Reppas on 12/27/24.
//

#include <limits>
#include <string>
#include <vector>
#include <map>

#include "../util/util.h"

static std::map<std::pair<char, char>, std::vector<std::string> > transitions{
    {{'0', '0'}, {"A"}},
    {{'0', '1'}, {"^<A"}},
    {{'0', '2'}, {"^A"}},
    {{'0', '3'}, {">^A", "^>A"}},
    {{'0', '4'}, {"^^<A"}},
    {{'0', '5'}, {"^^A"}},
    {{'0', '6'}, {"^^>A", ">^^A"}},
    {{'0', '7'}, {"^^^<A"}},
    {{'0', '8'}, {"^^^A"}},
    {{'0', '9'}, {"^^^>A", ">^^^A"}},
    {{'0', 'A'}, {">A"}},
    {{'1', '0'}, {">vA"}},
    {{'1', '1'}, {"A"}},
    {{'1', '2'}, {">A"}},
    {{'1', '3'}, {">>A"}},
    {{'1', '4'}, {"^A"}},
    {{'1', '5'}, {">^A", "^>A"}},
    {{'1', '6'}, {">>^A", "^>>A"}},
    {{'1', '7'}, {"^^A"}},
    {{'1', '8'}, {"^^>A", ">^^A"}},
    {{'1', '9'}, {">>^^A", "^^>>A"}},
    {{'1', 'A'}, {">>vA"}},
    {{'2', '0'}, {"vA"}},
    {{'2', '1'}, {"<A"}},
    {{'2', '2'}, {"A"}},
    {{'2', '3'}, {">A"}},
    {{'2', '4'}, {"^<A", "<^A"}},
    {{'2', '5'}, {"^A"}},
    {{'2', '6'}, {">^A", "^>A"}},
    {{'2', '7'}, {"<^^A", "^^<A"}},
    {{'2', '8'}, {"^^A"}},
    {{'2', '9'}, {"^^>A", ">^^A"}},
    {{'2', 'A'}, {">vA", "v>A"}},
    {{'3', '0'}, {"v<A", "<vA"}},
    {{'3', '1'}, {"<<A"}},
    {{'3', '2'}, {"<A"}},
    {{'3', '3'}, {"A"}},
    {{'3', '4'}, {"^<<A", "<<^A"}},
    {{'3', '5'}, {"^<A", "<^A"}},
    {{'3', '6'}, {"^A"}},
    {{'3', '7'}, {"<<^^A", "^^<<A"}},
    {{'3', '8'}, {"<^^A", "^^<A"}},
    {{'3', '9'}, {"^^A"}},
    {{'3', 'A'}, {"vA"}},
    {{'4', '0'}, {">vvA"}},
    {{'4', '1'}, {"vA"}},
    {{'4', '2'}, {">vA", "v>A"}},
    {{'4', '3'}, {">>vA", "v>>A"}},
    {{'4', '4'}, {"A"}},
    {{'4', '5'}, {">A"}},
    {{'4', '6'}, {">>A"}},
    {{'4', '7'}, {"^A"}},
    {{'4', '8'}, {">^A", "^>A"}},
    {{'4', '9'}, {">>^A", "^>>A"}},
    {{'4', 'A'}, {">>vvA"}},
    {{'5', '0'}, {"vvA"}},
    {{'5', '1'}, {"v<A", "<vA"}},
    {{'5', '2'}, {"vA"}},
    {{'5', '3'}, {">vA", "v>A"}},
    {{'5', '4'}, {"<A"}},
    {{'5', '5'}, {"A"}},
    {{'5', '6'}, {">A"}},
    {{'5', '7'}, {"^<A", "<^A"}},
    {{'5', '8'}, {"^A"}},
    {{'5', '9'}, {">^A", "^>A"}},
    {{'5', 'A'}, {">vvA", "vv>A"}},
    {{'6', '0'}, {"vv<A", "<vvA"}},
    {{'6', '1'}, {"v<<A", "<<vA"}},
    {{'6', '2'}, {"v<A", "<vA"}},
    {{'6', '3'}, {"vA"}},
    {{'6', '4'}, {"<<A"}},
    {{'6', '5'}, {"<A"}},
    {{'6', '6'}, {"A"}},
    {{'6', '7'}, {"^<<A", "<<^A"}},
    {{'6', '8'}, {"^<A", "<^A"}},
    {{'6', '9'}, {"^A"}},
    {{'6', 'A'}, {"vvA"}},
    {{'7', '0'}, {">vvvA"}},
    {{'7', '1'}, {"vvA"}},
    {{'7', '2'}, {">vvA", "vv>A"}},
    {{'7', '3'}, {">>vvA", "vv>>A"}},
    {{'7', '4'}, {"vA"}},
    {{'7', '5'}, {">vA", "v>A"}},
    {{'7', '6'}, {">>vA", "v>>A"}},
    {{'7', '7'}, {"A"}},
    {{'7', '8'}, {">A"}},
    {{'7', '9'}, {">>A"}},
    {{'7', 'A'}, {">>vvvA"}},
    {{'8', '0'}, {"vvvA"}},
    {{'8', '1'}, {"vv<A", "<vvA"}},
    {{'8', '2'}, {"vvA"}},
    {{'8', '3'}, {">vvA", "vv>A"}},
    {{'8', '4'}, {"v<A", "<vA"}},
    {{'8', '5'}, {"vA"}},
    {{'8', '6'}, {">vA", "v>A"}},
    {{'8', '7'}, {"<A"}},
    {{'8', '8'}, {"A"}},
    {{'8', '9'}, {">A"}},
    {{'8', 'A'}, {">vvvA", "vvv>A"}},
    {{'9', '0'}, {"<vvvA", "vvv<A"}},
    {{'9', '1'}, {"vv<<A", "<<vvA"}},
    {{'9', '2'}, {"vv<A", "<vvA"}},
    {{'9', '3'}, {"vvA"}},
    {{'9', '4'}, {"v<<A", "<<vA"}},
    {{'9', '5'}, {"v<A", "<vA"}},
    {{'9', '6'}, {"vA"}},
    {{'9', '7'}, {"<<A"}},
    {{'9', '8'}, {"<A"}},
    {{'9', '9'}, {"A"}},
    {{'9', 'A'}, {"vvvA"}},
    {{'A', '0'}, {"<A"}},
    {{'A', '1'}, {"^<<A"}},
    {{'A', '2'}, {"^<A", "<^A"}},
    {{'A', '3'}, {"^A"}},
    {{'A', '4'}, {"^^<<A"}},
    {{'A', '5'}, {"<^^A", "^^<A"}},
    {{'A', '6'}, {"^^A"}},
    {{'A', '7'}, {"^^^<<A"}},
    {{'A', '8'}, {"<^^^A", "^^^<A"}},
    {{'A', '9'}, {"^^^A"}},
    {{'A', 'A'}, {"A"}},
    {{'<', '<'}, {"A"}},
    {{'<', '>'}, {">>A"}},
    {{'<', '^'}, {">^A"}},
    {{'<', 'v'}, {">A"}},
    {{'<', 'A'}, {">>^A"}},
    {{'>', '<'}, {"<<A"}},
    {{'>', '>'}, {"A"}},
    {{'>', '^'}, {"^<A", "<^A"}},
    {{'>', 'v'}, {"<A"}},
    {{'>', 'A'}, {"^A"}},
    {{'^', '<'}, {"v<A"}},
    {{'^', '>'}, {">vA", "v>A"}},
    {{'^', '^'}, {"A"}},
    {{'^', 'v'}, {"vA"}},
    {{'^', 'A'}, {">A"}},
    {{'v', '<'}, {"<A"}},
    {{'v', '>'}, {">A"}},
    {{'v', '^'}, {"^A"}},
    {{'v', 'v'}, {"A"}},
    {{'v', 'A'}, {">^A", "^>A"}},
    {{'A', '<'}, {"v<<A"}},
    {{'A', '>'}, {"vA"}},
    {{'A', '^'}, {"<A"}},
    {{'A', 'v'}, {"v<A", "<vA"}},
    {{'A', 'A'}, {"A"}}
};

static std::map<std::tuple<char, char, long>, long> cache;

static long getCost(const char from, const char to, const long depth) {
    if (depth == 0)
        return static_cast<long>(transitions[{from, to}][0].size());
    if (cache.contains({from, to, depth}))
        return cache[{from, to, depth}];

    long minCost = std::numeric_limits<long>::max();
    for (const auto &transition: transitions[{from, to}]) {
        char prev = 'A';
        long cost = 0;
        for (const auto c: transition) {
            cost += getCost(prev, c, depth - 1);
            prev = c;
        }
        minCost = std::min(minCost, cost);
    }
    return cache[{from, to, depth}] = minCost;
}

static long getComplexity(const std::string &line, const long depth) {
    char prev = 'A';
    long cost = 0;
    for (const auto c: line) {
        cost += getCost(prev, c, depth);
        prev = c;
    }
    const auto numeric = std::stol(line.substr(0, 3));
    return numeric * cost;
}

namespace day21 {
    long part1(const std::string &input) {
        long total = 0;
        for (const auto &line: split(input))
            total += getComplexity(line, 2);
        return total;
    }

    long part2(const std::string &input) {
        long total = 0;
        for (const auto &line: split(input))
            total += getComplexity(line, 25);
        return total;
    }
}
